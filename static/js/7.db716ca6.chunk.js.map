{"version":3,"sources":["components/hoc/FormField/FormField.module.css","components/hoc/FormField/FormField.jsx","utils/validators.js","components/Login/LoginForm/LoginForm.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["module","exports","error","errorWindow","FormField","Component","_ref","input","meta","props","Object","C_Users_admin_Desktop_social_network_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","hasError","touched","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","styles","assign","Textarea","Input","__webpack_require__","d","__webpack_exports__","required","maxLength","value","undefined","max","length","concat","maxLength16","reduxForm","form","handleSubmit","react_default","onSubmit","htmlFor","Field","name","component","type","validate","Login","isAuth","submitForm","react_router","to","Login_LoginForm_LoginForm","connect","state","authReducer","logIn","components_Login_Login","formData","login","password","rememberMe"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,yBAAAC,YAAA,iLCEZC,EAAY,SAAAC,GAAS,OAAI,SAAAC,GAA6B,IAA3BC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,KAASC,EAAWC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,kBAClDM,EAAWJ,EAAKK,SAAWL,EAAKN,MAEtC,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAWM,IAAOhB,MAAQ,IACtCY,EAAAC,EAAAC,cAACX,EAADK,OAAAS,OAAA,GAAeZ,EAAWE,IACzBG,GAAYE,EAAAC,EAAAC,cAAA,YAAOR,EAAKN,UAKxBkB,EAAWhB,EAAU,YACrBiB,EAAQjB,EAAU,2CCf/BkB,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,IAAMD,EAAW,SAAAE,GAAK,OAAIA,OAAQC,EAAY,0BAExCF,EAAY,SAAAG,GAAG,OAAI,SAAAF,GAAK,OAAIA,GAASA,EAAMG,OAASD,EAAxB,WAAAE,OAAyCF,EAAzC,4BAAoED,oICIvGI,EAAcN,YAAU,IAqCfO,cAAU,CAAEC,KAAM,SAAlBD,CAnCG,SAAA3B,GAA6B,IAA1B6B,EAA0B7B,EAA1B6B,aAAcjC,EAAYI,EAAZJ,MAC/B,OACIkC,EAAArB,EAAAC,cAAA,QAAMqB,SAAUF,GACZC,EAAArB,EAAAC,cAAA,WACIoB,EAAArB,EAAAC,cAAA,SAAOsB,QAAQ,SAAf,SACAF,EAAArB,EAAAC,cAACuB,EAAA,EAAD,CACIC,KAAK,QACLC,UAAWpB,IACXqB,KAAK,OACLC,SAAUlB,OAGlBW,EAAArB,EAAAC,cAAA,WACIoB,EAAArB,EAAAC,cAAA,SAAOsB,QAAQ,YAAf,YACAF,EAAArB,EAAAC,cAACuB,EAAA,EAAD,CACIC,KAAK,WACLC,UAAWpB,IACXqB,KAAK,WACLC,SAAU,CAAClB,IAAUO,MAG7BI,EAAArB,EAAAC,cAAA,WACIoB,EAAArB,EAAAC,cAACuB,EAAA,EAAD,CACIC,KAAK,aACLC,UAAU,QACVC,KAAK,aAETN,EAAArB,EAAAC,cAAA,SAAOsB,QAAQ,cAAf,gBAEHpC,GAASkC,EAAArB,EAAAC,cAAA,OAAKC,UAAWC,IAAOf,aAAcD,GAC/CkC,EAAArB,EAAAC,cAAA,UAAQ0B,KAAK,UAAb,YCvBGE,EAXD,SAAAtC,GAA4B,IAAzBuC,EAAyBvC,EAAzBuC,OAAQC,EAAiBxC,EAAjBwC,WACrB,OAAID,EAAeT,EAAArB,EAAAC,cAAC+B,EAAA,EAAD,CAAUC,GAAG,aAG5BZ,EAAArB,EAAAC,cAAA,WACIoB,EAAArB,EAAAC,cAAA,mBACAoB,EAAArB,EAAAC,cAACiC,EAAD,CAAWZ,SAAUS,cCQlBI,sBANS,SAAAC,GACpB,MAAO,CACHN,OAAQM,EAAMC,YAAYP,SAIM,CAAEQ,WAA3BH,CAbQ,SAAA5C,GAAuB,IAApBuC,EAAoBvC,EAApBuC,OAAQQ,EAAY/C,EAAZ+C,MAI9B,OAAOjB,EAAArB,EAAAC,cAACsC,EAAD,CAAOT,OAAQA,EAAQC,WAHX,SAACS,GAChBF,EAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.db716ca6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormField_error__gFhzy\",\"errorWindow\":\"FormField_errorWindow__2ZKzs\"};","import React from 'react';\r\nimport styles from \"./FormField.module.css\";\r\n\r\nconst FormField = Component => ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={hasError ? styles.error : \"\"}>\r\n            <Component {...input} {...props} />\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = FormField('textarea');\r\nexport const Input = FormField('input');","export const required = value => value ? undefined : 'This field is required';\r\n\r\nexport const maxLength = max => value => value && value.length > max ? `Must be ${max} characters or less` : undefined;","import React from 'react';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Input } from \"../../hoc/FormField/FormField\";\r\nimport { maxLength, required } from \"../../../utils/validators\";\r\nimport styles from \"../../hoc/FormField/FormField.module.css\";\r\n\r\nconst maxLength16 = maxLength(16);\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"login\">Login</label>\r\n                <Field\r\n                    name=\"login\"\r\n                    component={Input}\r\n                    type=\"text\"\r\n                    validate={required}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Field\r\n                    name=\"password\"\r\n                    component={Input}\r\n                    type=\"password\"\r\n                    validate={[required, maxLength16]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    name=\"rememberMe\"\r\n                    component=\"input\"\r\n                    type=\"checkbox\"\r\n                />\r\n                <label htmlFor=\"rememberMe\">Remember me</label>\r\n            </div>\r\n            {error && <div className={styles.errorWindow}>{error}</div>}\r\n            <button type=\"submit\">Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'login' })(LoginForm);","import React from 'react';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\n\r\nconst Login = ({ isAuth, submitForm }) => {\r\n    if (isAuth) return <Navigate to=\"/profile\" />\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm onSubmit={submitForm} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { logIn } from \"../../redux/reducers/authReducer\";\r\n\r\nconst LoginContainer = ({ isAuth, logIn }) => {\r\n    const submitForm = (formData) => {\r\n        logIn(formData.login, formData.password, formData.rememberMe);\r\n    }\r\n    return <Login isAuth={isAuth} submitForm={submitForm} />\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { logIn })(LoginContainer);"],"sourceRoot":""}